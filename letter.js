const string


// Create an object/dictionary where each character is added as a key and the value is counted.
const createLetterList = (string) => { // -> return an object
    const dictionary = {};
    for (let letter of string){
        // if the letter is not yet a key in the dictionary  
        // (dictionary[letter]+1) will be false, and so set to 1
        dictionary[letter] = (dictionary[letter]+1) || 1 ;
    }
    
    return dictionary;
}

// Create an array of characters with highest value first.         
const lettersSortedByFrequency = (dictionary) => { // -> return an array
    // create clone of dictionary so as not to modify original dictionary
    let dictionaryClone = JSON.parse(JSON.stringify(dictionary))
    const sortedByFrequency = [];
    let largest = 0
    let largestLetter = ''
    while(Object.keys(dictionaryClone).length > 0){
        for (let letter in dictionaryClone){
            if (dictionaryClone[letter] > largest){
                largest = dictionaryClone[letter];
                largestLetter = letter;
            }   
        }
        sortedByFrequency.push(largestLetter)
        delete dictionaryClone[largestLetter];
        largest = 0;
    }
    return sortedByFrequency;
}

// Run the functions:

let dictionary = createLetterList(string)
console.log(lettersSortedByFrequency(dictionary))

// Output:
// [
//     'E', 'N', 'I', 'G', 'M', 'A',
//     '_', 'X', 'Z', 'B', 'K', 'D',
//     'P', 'C', 'W', 'O', 'Y', 'J',
//     'H', 'S', 'R', 'L', 'Q', 'F',
//     'T', 'U', 'V'
//   ]

// For clearer output of the solution to the puzzle:
console.log(lettersSortedByFrequency(dictionary).join('').split('_')[0])

// Output:
// ENIGMA